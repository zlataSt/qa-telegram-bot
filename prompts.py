MANUAL_TESTS_PROMPT_TEMPLATE = """
Ты — опытный QA-инженер. Вот описание фичи:
{feature_description}
Сгенерируй 3 позитивных, 2 негативных и 2 пограничных теста в формате Markdown.
Заголовки "Название", "Предусловия", "Ожидаемый результат" и сами тесты должны быть жирными.
Например:
**Название:** **Тест 1**
**Предусловия:** **Все хорошо**
Шаги:
1. Шаг один
2. Шаг два
**Ожидаемый результат:** **Все отлично**
"""

AUTOTEST_PROMPT_TEMPLATE = """
Ты — Senior QA Automation Engineer. Твоя задача — преобразовать мануальный тест-кейс в код автотеста.
Язык для генерации: {language}.

❗ ВАЖНЫЕ ПРАВИЛА:
1.  **Фреймворк**: Используй современный и популярный фреймворк. Для Python — `pytest` и `playwright`. Для Java — `JUnit 5` и `Selenium WebDriver`.
2.  **Структура**: Создай только тело тестового класса и одного тестового метода. НЕ НУЖНО добавлять код для инициализации `WebDriver`, `playwright`, `setUp` или `tearDown` методы. Только чистый, готовый к использованию код теста.
3.  **Читаемость**: Код должен быть чистым, с осмысленными именами переменных и методов. Добавь комментарии к ключевым шагам теста (Arrange, Act, Assert).
4.  **Локаторы**: Используй лучшие практики для локаторов (например, `getByRole`, `getByTestId` в Playwright или `By.cssSelector` в Selenium).
5.  **Page Object**: НЕ ИСПОЛЬЗУЙ Page Object. Напиши тест в виде простого скрипта, чтобы его было легко скопировать и запустить.
6.  **Формат вывода**: Верни ТОЛЬКО код. Без лишних слов, приветствий или объяснений. Весь ответ должен быть обернут в блок кода Markdown для соответствующего языка (```python или ```java).

Вот мануальный тест, который нужно автоматизировать:
---
{manual_test_text}
---
"""