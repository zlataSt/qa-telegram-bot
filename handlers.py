import asyncio
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.exceptions import TelegramBadRequest

from gemini_client import generate_test_cases, generate_autotest_code
from file_utils import save_to_docx, save_to_pdf, save_code_to_file, split_text

import uuid
import os
import json

router = Router()
SESSION_CACHE_FILE = "session_cache.json"

if os.path.exists(SESSION_CACHE_FILE):
    with open(SESSION_CACHE_FILE, "r", encoding="utf-8") as f:
        SESSION_CACHE = json.load(f)
else:
    SESSION_CACHE = {}

def save_cache():
    with open(SESSION_CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(SESSION_CACHE, f, ensure_ascii=False, indent=2)

def sanitize_markdown(text: str) -> str:
    text = text.replace(':**', ': **').replace('****', '**')
    return text

def sanitize_code_block(code: str, language: str) -> str:
    """–£–±–∏—Ä–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ –º–∞—Ä–∫–µ—Ä —è–∑—ã–∫–∞."""
    clean_code = code.strip()
    if clean_code.startswith(f"```{language}"):
        clean_code = clean_code[len(f"```{language}"):]
    if clean_code.endswith("```"):
        clean_code = clean_code[:-3]
    return clean_code.strip()

def get_main_keyboard(session_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞–Ω—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÑ DOCX", callback_data=f"docx:{session_id}"),
            InlineKeyboardButton(text="üìë PDF", callback_data=f"pdf:{session_id}")
        ],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"full_manual:{session_id}")],
        [InlineKeyboardButton(text="ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ç–µ—Å—Ç", callback_data=f"autotest_menu:{session_id}")],
        [InlineKeyboardButton(text="‚úÖ –ù–æ–≤–∞—è —Ñ–∏—á–∞", callback_data="new_feature")]
    ])

def get_autotest_lang_keyboard(session_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üêç Python", callback_data=f"gen_auto:python:{session_id}"),
            InlineKeyboardButton(text="‚òï Java", callback_data=f"gen_auto:java:{session_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_manual:{session_id}")]
    ])

def get_autotest_result_keyboard(session_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–∞–Ω—É–∞–ª—å–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é", callback_data=f"back_manual:{session_id}")]
    ])

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏—á–∏, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç-–∫–µ–π—Å—ã ‚úçÔ∏è")

@router.message(F.text)
async def handle_text(message: Message):
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∏—á—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç—ã... üß†‚è≥")
    raw_result = generate_test_cases(message.text)
    result = sanitize_markdown(raw_result)
    session_id = str(uuid.uuid4())
    SESSION_CACHE[session_id] = {"manual": result}
    save_cache()
    preview_lines = result.split('\n')[:7]
    preview_text = "\n".join(preview_lines) + "\n\n..."
    keyboard = get_main_keyboard(session_id)
    await message.answer(
        "**–í–æ—Ç –ø—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–Ω—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:**\n\n" + preview_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith(("docx:", "pdf:", "full_manual:")))
async def manual_actions_handler(call: CallbackQuery):
    action, session_id = call.data.split(":", 1)
    session = SESSION_CACHE.get(session_id)
    if not session or "manual" not in session:
        await call.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    content = session["manual"]
    if action == "docx":
        path = save_to_docx(content, session_id)
        await call.message.answer_document(FSInputFile(path))
        os.remove(path)
    elif action == "pdf":
        path = save_to_pdf(content, session_id)
        await call.message.answer_document(FSInputFile(path))
        os.remove(path)
    elif action == "full_manual":
        try:
            await call.message.answer(content, parse_mode="Markdown")
        except TelegramBadRequest:
            await call.message.answer(content)
        finally:
            keyboard = get_main_keyboard(session_id)
            await call.message.answer("üîΩ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data.startswith("autotest_menu:"))
async def show_autotest_menu(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    session_id = call.data.split(":")[1]
    keyboard = get_autotest_lang_keyboard(session_id)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞:", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data.startswith("gen_auto:"))
async def generate_autotest_handler(call: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç, –¥–µ–ª—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    _, language, session_id = call.data.split(":", 2)
    session = SESSION_CACHE.get(session_id)
    if not session or "manual" not in session:
        await call.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    await call.message.edit_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–≤—Ç–æ—Ç–µ—Å—Ç –Ω–∞ {language.title()}... ü§ñ‚è≥")
    manual_test = session["manual"]
    raw_code = generate_autotest_code(manual_test, language)
    code = sanitize_code_block(raw_code, language)
    try:
        formatted_code = f'<pre><code class="language-{language}">{code}</code></pre>'
        if len(formatted_code) <= 4096:
            await call.message.answer(formatted_code, parse_mode="HTML")
        else:
            chunks = split_text(code)
            for i, chunk in enumerate(chunks):
                header = f"–ö–æ–¥ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ (—á–∞—Å—Ç—å {i+1}/{len(chunks)}):\n" if len(chunks) > 1 else ""
                await call.message.answer(f"{header}```{language}\n{chunk}\n```", parse_mode="MarkdownV2")
                await asyncio.sleep(0.2)
    except TelegramBadRequest:
        chunks = split_text(code)
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç:")
        for chunk in chunks:
            await call.message.answer(chunk)
            await asyncio.sleep(0.2)
    file_path = save_code_to_file(code, session_id, language)
    await call.message.answer_document(FSInputFile(file_path))
    os.remove(file_path)
    keyboard = get_autotest_result_keyboard(session_id)
    await call.message.answer("–ê–≤—Ç–æ—Ç–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data.startswith("back_manual:"))
async def back_to_manual_handler(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ–Ω—é –º–∞–Ω—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    session_id = call.data.split(":")[1]
    session = SESSION_CACHE.get(session_id)
    if not session or "manual" not in session:
        await call.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    content = session["manual"]
    preview_lines = content.split('\n')[:7]
    preview_text = "\n".join(preview_lines) + "\n\n..."
    keyboard = get_main_keyboard(session_id)
    
    await call.message.edit_text(
        "**–í–æ—Ç –ø—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–Ω—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:**\n\n" + preview_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await call.answer()

@router.callback_query(F.data == "new_feature")
async def handle_new_feature(call: CallbackQuery):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–π —Ñ–∏—á–∏."""
    await call.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ñ–¥—É –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏—á–∏. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –µ–≥–æ –≤ —á–∞—Ç. ‚úçÔ∏è")
    await call.answer()